module Main exposing (main)

import Derive
import Derive.Util exposing (..)
import Dict exposing (Dict)
import Elm.Parser
import Elm.Processing
import Elm.Writer
import Graph
import List.Extra as List
import Parser exposing (Problem(..))
import Parser.Extra
import Platform
import Port


headerComment : String
headerComment =
    "-- This module is generated by elm-derive, do not edit this manually"


type alias Flags =
    { dir : String
    , target : String
    }


type alias Model =
    { flags : Flags
    , files : Dict String String
    }


type Msg
    = ReceiveFile { path : String, source : String }


main : Program Flags Model Msg
main =
    Platform.worker
        { init =
            \flags ->
                ( { flags = flags
                  , files = Dict.empty
                  }
                , Port.requestFile <| flags.dir ++ flags.target
                )
        , update = update
        , subscriptions = always <| Port.receiveFile ReceiveFile
        }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ReceiveFile { path, source } ->
            let
                _ =
                    Debug.log "ReceiveFile" path
            in
            if path == model.flags.dir ++ model.flags.target then
                case Elm.Parser.parse source of
                    Err err ->
                        ( model
                        , Port.exitWithError <| "Parse Error: " ++ (unlines <| List.map (Parser.Extra.deadEndToString source) err)
                        )

                    Ok rawFile ->
                        let
                            file =
                                Elm.Processing.process Elm.Processing.init rawFile

                            result =
                                Derive.generate file
                        in
                        case result of
                            Err err ->
                                ( model, Port.exitWithError <| "Generation Error: " ++ String.join " " err )

                            Ok generated ->
                                ( model
                                , Cmd.batch
                                    [ Port.writeFile
                                        { path = model.flags.dir ++ String.dropRight 4 model.flags.target ++ "/Derive.elm"
                                        , source = Elm.Writer.write (Elm.Writer.writeFile generated)
                                        }
                                    , Port.exit ()
                                    ]
                                )

            else
                ( model, Cmd.none )
